// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum pix_type {
  cpf
  cnpj
  email
  phone
  random
}

enum mass_measure {
  kg
  ton
  bag
}

model Customer {
  id Int @id @default(autoincrement())
  first_name String
  last_name String
  email String @unique
  cpf String @unique
  password String
  farm Farm[]
  address Address?
  payment_info PaymentInfo?
  order Order[]
  payment Payment?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Farm {
  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  address Address?
  product Product[]
  fk_customer_id Int @unique
  customer Customer @relation(fields: [fk_customer_id], references: [id])
}

model Address {
  id Int @id @unique @default(autoincrement())
  uf String
  city String
  num String
  postal_code String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  fk_farm_id Int @unique
  farm Farm @relation(fields: [fk_farm_id], references: [id])
  fk_customer_id Int @unique
  customer Customer @relation(fields: [fk_customer_id], references: [id])
}

model PaymentInfo {
  id Int @id @unique @default(autoincrement())
  pix_key String @unique
  pix_type pix_type
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  fk_customer_id Int @unique
  customer Customer @relation(fields: [fk_customer_id], references: [id])
}

model Product {
  id Int @id @unique @default(autoincrement())
  name String
  mass_measure mass_measure @default(kg)
  total_amount Decimal
  price Decimal
  harvest DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  fk_farm_id Int @unique
  farm Farm @relation(fields: [fk_farm_id], references: [id])
  productOrder ProductOrder[]
}

model Order {
  id Int @id @unique @default(autoincrement())
  total_price Decimal
  payment Payment?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  fk_customer_id Int
  customer Customer @relation(fields: [fk_customer_id], references: [id])
  productOrder ProductOrder[]
}

model ProductOrder {
  id Int @id @default(autoincrement())
  product_id Product[]
  order_id Order[]
  quantity Int
}

model Payment {
  id Int @id @unique @default(autoincrement())
  value Decimal
  created_at DateTime @default(now())
  fk_customer_id Int @unique
  fk_order_id Int @unique
  customer Customer @relation(fields: [fk_customer_id], references: [id])
  order Order @relation(fields: [fk_order_id], references: [id])
}